'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMixin = require('react-mixin');

var _reactMixin2 = _interopRequireDefault(_reactMixin);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _zscroller = require('zscroller');

var _zscroller2 = _interopRequireDefault(_zscroller);

var _PickerMixin = require('./PickerMixin');

var _PickerMixin2 = _interopRequireDefault(_PickerMixin);

var _isChildrenEqual = require('./isChildrenEqual');

var _isChildrenEqual2 = _interopRequireDefault(_isChildrenEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Picker = function (_React$Component) {
    (0, _inherits3['default'])(Picker, _React$Component);

    function Picker(props) {
        (0, _classCallCheck3['default'])(this, Picker);

        var _this = (0, _possibleConstructorReturn3['default'])(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).call(this, props));

        _this.scrollingComplete = function () {
            var _this$zscroller$scrol = _this.zscroller.scroller.getValues(),
                top = _this$zscroller$scrol.top;

            if (top >= 0) {
                _this.doScrollingComplete(top);
            }
        };
        var selectedValueState = void 0;
        var selectedValue = props.selectedValue,
            defaultSelectedValue = props.defaultSelectedValue,
            children = props.children;

        if (selectedValue !== undefined) {
            selectedValueState = selectedValue;
        } else if (defaultSelectedValue !== undefined) {
            selectedValueState = defaultSelectedValue;
        } else if (children && children.length) {
            selectedValueState = children[0].value;
        }
        _this.state = {
            selectedValue: selectedValueState
        };
        return _this;
    }

    (0, _createClass3['default'])(Picker, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            // https://github.com/react-component/m-picker/issues/18
            this.itemHeight = this.refs.indicator.getBoundingClientRect().height;
            // compact
            this.refs.content.style.padding = this.itemHeight * 3 + 'px 0';
            this.zscroller = new _zscroller2['default'](this.refs.content, {
                scrollingX: false,
                snapping: true,
                locking: false,
                penetrationDeceleration: .1,
                minVelocityToKeepDecelerating: 0.5,
                scrollingComplete: this.scrollingComplete
            });
            this.zscroller.setDisabled(this.props.disabled);
            this.zscroller.scroller.setSnapSize(0, this.itemHeight);
            this.select(this.state.selectedValue);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if ('selectedValue' in nextProps) {
                this.setState({
                    selectedValue: nextProps.selectedValue
                });
            }
            this.zscroller.setDisabled(nextProps.disabled);
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            return this.state.selectedValue !== nextState.selectedValue || !(0, _isChildrenEqual2['default'])(this.props.children, nextProps.children, this.props.pure);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.zscroller.reflow();
            this.select(this.state.selectedValue);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.zscroller.destroy();
        }
    }, {
        key: 'scrollTo',
        value: function scrollTo(top) {
            this.zscroller.scroller.scrollTo(0, top);
        }
    }, {
        key: 'fireValueChange',
        value: function fireValueChange(selectedValue) {
            if (selectedValue !== this.state.selectedValue) {
                if (!('selectedValue' in this.props)) {
                    this.setState({
                        selectedValue: selectedValue
                    });
                }
                if (this.props.onValueChange) {
                    this.props.onValueChange(selectedValue);
                }
            }
        }
    }, {
        key: 'getChildMember',
        value: function getChildMember(child, m) {
            return child[m];
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.props.selectedValue || this.props.children && this.props.children[0] && this.props.children[0].value;
        }
    }, {
        key: 'toChildrenArray',
        value: function toChildrenArray(children) {
            return children;
        }
    }, {
        key: 'render',
        value: function render() {
            var _pickerCls;

            var _props = this.props,
                children = _props.children,
                prefixCls = _props.prefixCls,
                className = _props.className,
                itemStyle = _props.itemStyle,
                indicatorStyle = _props.indicatorStyle;
            var selectedValue = this.state.selectedValue;

            var itemClassName = prefixCls + '-item';
            var selectedItemClassName = itemClassName + ' ' + prefixCls + '-item-selected';
            var items = children.map(function (item) {
                return _react2['default'].createElement(
                    'div',
                    { style: itemStyle, className: selectedValue === item.value ? selectedItemClassName : itemClassName, key: item.value },
                    item.label
                );
            });
            var pickerCls = (_pickerCls = {}, (0, _defineProperty3['default'])(_pickerCls, className, !!className), (0, _defineProperty3['default'])(_pickerCls, prefixCls, true), _pickerCls);
            return _react2['default'].createElement(
                'div',
                { className: (0, _classnames2['default'])(pickerCls) },
                _react2['default'].createElement('div', { className: prefixCls + '-mask' }),
                _react2['default'].createElement('div', { className: prefixCls + '-indicator', ref: 'indicator', style: indicatorStyle }),
                _react2['default'].createElement(
                    'div',
                    { className: prefixCls + '-content', ref: 'content' },
                    items
                )
            );
        }
    }]);
    return Picker;
}(_react2['default'].Component);

Picker.defaultProps = {
    prefixCls: 'rmc-picker',
    pure: true,
    onValueChange: function onValueChange() {}
};
_reactMixin2['default'].onClass(Picker, _PickerMixin2['default']);
exports['default'] = Picker;
module.exports = exports['default'];