'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcDialog = require('rc-dialog');

var _rcDialog2 = _interopRequireDefault(_rcDialog);

var _reactMixin = require('react-mixin');

var _reactMixin2 = _interopRequireDefault(_reactMixin);

var _PopupMixin = require('./PopupMixin');

var _PopupMixin2 = _interopRequireDefault(_PopupMixin);

var _rcTouchable = require('rc-touchable');

var _rcTouchable2 = _interopRequireDefault(_rcTouchable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var PopupPicker = function (_React$Component) {
  (0, _inherits3['default'])(PopupPicker, _React$Component);

  function PopupPicker() {
    (0, _classCallCheck3['default'])(this, PopupPicker);
    return (0, _possibleConstructorReturn3['default'])(this, (PopupPicker.__proto__ || Object.getPrototypeOf(PopupPicker)).apply(this, arguments));
  }

  (0, _createClass3['default'])(PopupPicker, [{
    key: 'getModal',
    value: function getModal() {
      var props = this.props;
      if (!this.state.visible) {
        return null;
      }
      var prefixCls = props.prefixCls;

      return _react2['default'].createElement(
        _rcDialog2['default'],
        { prefixCls: '' + prefixCls, className: props.className || '', visible: true, closable: false, transitionName: props.transitionName || props.popupTransitionName, maskTransitionName: props.maskTransitionName, onClose: this.hide.bind(this), style: props.style },
        _react2['default'].createElement(
          'div',
          null,
          _react2['default'].createElement(
            'div',
            { className: prefixCls + '-header' },
            _react2['default'].createElement(
              _rcTouchable2['default'],
              { activeClassName: prefixCls + '-item-active' },
              _react2['default'].createElement(
                'div',
                { className: prefixCls + '-item ' + prefixCls + '-header-left', onClick: this.onDismiss.bind(this) },
                props.dismissText
              )
            ),
            _react2['default'].createElement(
              'div',
              { className: prefixCls + '-item ' + prefixCls + '-title' },
              props.title
            ),
            _react2['default'].createElement(
              _rcTouchable2['default'],
              { activeClassName: prefixCls + '-item-active' },
              _react2['default'].createElement(
                'div',
                { className: prefixCls + '-item ' + prefixCls + '-header-right', onClick: this.onOk.bind(this) },
                props.okText
              )
            )
          ),
          this.getContent()
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return this.getRender();
    }
  }]);
  return PopupPicker;
}(_react2['default'].Component);

PopupPicker.defaultProps = {
  prefixCls: 'rmc-picker-popup',
  triggerType: 'onClick',
  WrapComponent: 'span'
};
_reactMixin2['default'].onClass(PopupPicker, _PopupMixin2['default']);
exports['default'] = PopupPicker;
module.exports = exports['default'];