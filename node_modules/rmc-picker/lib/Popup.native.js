'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactMixin = require('react-mixin');

var _reactMixin2 = _interopRequireDefault(_reactMixin);

var _PopupMixin = require('./PopupMixin');

var _PopupMixin2 = _interopRequireDefault(_PopupMixin);

var _Modal = require('rc-dialog/lib/Modal');

var _Modal2 = _interopRequireDefault(_Modal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var PopupPicker = function (_React$Component) {
    (0, _inherits3['default'])(PopupPicker, _React$Component);

    function PopupPicker() {
        (0, _classCallCheck3['default'])(this, PopupPicker);
        return (0, _possibleConstructorReturn3['default'])(this, (PopupPicker.__proto__ || Object.getPrototypeOf(PopupPicker)).apply(this, arguments));
    }

    (0, _createClass3['default'])(PopupPicker, [{
        key: 'getModal',
        value: function getModal() {
            var props = this.props;
            var styles = props.styles,
                title = props.title,
                okText = props.okText,
                dismissText = props.dismissText;

            var titleEl = typeof title === 'string' ? _react2['default'].createElement(
                _reactNative.Text,
                { style: [styles.title] },
                title
            ) : title;
            var okEl = typeof okText === 'string' ? _react2['default'].createElement(
                _reactNative.Text,
                { style: [styles.actionText] },
                okText
            ) : okText;
            var dismissEl = typeof dismissText === 'string' ? _react2['default'].createElement(
                _reactNative.Text,
                { style: [styles.actionText] },
                dismissText
            ) : dismissText;
            return _react2['default'].createElement(
                _Modal2['default'],
                { animationType: 'slide-up', wrapStyle: styles.modal, visible: this.state.visible, onClose: this.onDismiss.bind(this) },
                _react2['default'].createElement(
                    _reactNative.View,
                    { style: [styles.header] },
                    _react2['default'].createElement(
                        _reactNative.TouchableHighlight,
                        { onPress: this.onDismiss.bind(this), style: [styles.headerItem], activeOpacity: props.actionTextActiveOpacity, underlayColor: props.actionTextUnderlayColor },
                        dismissEl
                    ),
                    _react2['default'].createElement(
                        _reactNative.View,
                        { style: [styles.headerItem] },
                        titleEl
                    ),
                    _react2['default'].createElement(
                        _reactNative.TouchableHighlight,
                        { onPress: this.onOk.bind(this), style: [styles.headerItem], activeOpacity: props.actionTextActiveOpacity, underlayColor: props.actionTextUnderlayColor },
                        okEl
                    )
                ),
                this.getContent()
            );
        }
    }, {
        key: 'render',
        value: function render() {
            return this.getRender();
        }
    }]);
    return PopupPicker;
}(_react2['default'].Component);

PopupPicker.defaultProps = {
    actionTextUnderlayColor: '#ddd',
    actionTextActiveOpacity: 1,
    triggerType: 'onPress',
    styles: {},
    WrapComponent: _reactNative.View
};
_reactMixin2['default'].onClass(PopupPicker, _PopupMixin2['default']);
exports['default'] = PopupPicker;
module.exports = exports['default'];