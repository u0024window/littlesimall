import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import Modal from 'rc-dialog';
import reactMixin from 'react-mixin';
import PopupMixin from './PopupMixin';
import Touchable from 'rc-touchable';

var PopupPicker = function (_React$Component) {
  _inherits(PopupPicker, _React$Component);

  function PopupPicker() {
    _classCallCheck(this, PopupPicker);

    return _possibleConstructorReturn(this, (PopupPicker.__proto__ || Object.getPrototypeOf(PopupPicker)).apply(this, arguments));
  }

  _createClass(PopupPicker, [{
    key: 'getModal',
    value: function getModal() {
      var props = this.props;
      if (!this.state.visible) {
        return null;
      }
      var prefixCls = props.prefixCls;

      return React.createElement(
        Modal,
        { prefixCls: '' + prefixCls, className: props.className || '', visible: true, closable: false, transitionName: props.transitionName || props.popupTransitionName, maskTransitionName: props.maskTransitionName, onClose: this.hide.bind(this), style: props.style },
        React.createElement(
          'div',
          null,
          React.createElement(
            'div',
            { className: prefixCls + '-header' },
            React.createElement(
              Touchable,
              { activeClassName: prefixCls + '-item-active' },
              React.createElement(
                'div',
                { className: prefixCls + '-item ' + prefixCls + '-header-left', onClick: this.onDismiss.bind(this) },
                props.dismissText
              )
            ),
            React.createElement(
              'div',
              { className: prefixCls + '-item ' + prefixCls + '-title' },
              props.title
            ),
            React.createElement(
              Touchable,
              { activeClassName: prefixCls + '-item-active' },
              React.createElement(
                'div',
                { className: prefixCls + '-item ' + prefixCls + '-header-right', onClick: this.onOk.bind(this) },
                props.okText
              )
            )
          ),
          this.getContent()
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return this.getRender();
    }
  }]);

  return PopupPicker;
}(React.Component);

PopupPicker.defaultProps = {
  prefixCls: 'rmc-picker-popup',
  triggerType: 'onClick',
  WrapComponent: 'span'
};
reactMixin.onClass(PopupPicker, PopupMixin);
export default PopupPicker;