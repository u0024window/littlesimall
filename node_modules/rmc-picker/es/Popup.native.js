import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import { View, TouchableHighlight, Text } from 'react-native';
import reactMixin from 'react-mixin';
import PopupMixin from './PopupMixin';
import Modal from 'rc-dialog/es/Modal';

var PopupPicker = function (_React$Component) {
    _inherits(PopupPicker, _React$Component);

    function PopupPicker() {
        _classCallCheck(this, PopupPicker);

        return _possibleConstructorReturn(this, (PopupPicker.__proto__ || Object.getPrototypeOf(PopupPicker)).apply(this, arguments));
    }

    _createClass(PopupPicker, [{
        key: 'getModal',
        value: function getModal() {
            var props = this.props;
            var styles = props.styles,
                title = props.title,
                okText = props.okText,
                dismissText = props.dismissText;

            var titleEl = typeof title === 'string' ? React.createElement(
                Text,
                { style: [styles.title] },
                title
            ) : title;
            var okEl = typeof okText === 'string' ? React.createElement(
                Text,
                { style: [styles.actionText] },
                okText
            ) : okText;
            var dismissEl = typeof dismissText === 'string' ? React.createElement(
                Text,
                { style: [styles.actionText] },
                dismissText
            ) : dismissText;
            return React.createElement(
                Modal,
                { animationType: 'slide-up', wrapStyle: styles.modal, visible: this.state.visible, onClose: this.onDismiss.bind(this) },
                React.createElement(
                    View,
                    { style: [styles.header] },
                    React.createElement(
                        TouchableHighlight,
                        { onPress: this.onDismiss.bind(this), style: [styles.headerItem], activeOpacity: props.actionTextActiveOpacity, underlayColor: props.actionTextUnderlayColor },
                        dismissEl
                    ),
                    React.createElement(
                        View,
                        { style: [styles.headerItem] },
                        titleEl
                    ),
                    React.createElement(
                        TouchableHighlight,
                        { onPress: this.onOk.bind(this), style: [styles.headerItem], activeOpacity: props.actionTextActiveOpacity, underlayColor: props.actionTextUnderlayColor },
                        okEl
                    )
                ),
                this.getContent()
            );
        }
    }, {
        key: 'render',
        value: function render() {
            return this.getRender();
        }
    }]);

    return PopupPicker;
}(React.Component);

PopupPicker.defaultProps = {
    actionTextUnderlayColor: '#ddd',
    actionTextActiveOpacity: 1,
    triggerType: 'onPress',
    styles: {},
    WrapComponent: View
};
reactMixin.onClass(PopupPicker, PopupMixin);
export default PopupPicker;