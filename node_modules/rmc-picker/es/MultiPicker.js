import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import classnames from 'classnames';
import reactMixin from 'react-mixin';
import Picker from './Picker';
import MultiPickerMixin from './MultiPickerMixin';

var MultiPicker = function (_React$Component) {
    _inherits(MultiPicker, _React$Component);

    function MultiPicker() {
        _classCallCheck(this, MultiPicker);

        return _possibleConstructorReturn(this, (MultiPicker.__proto__ || Object.getPrototypeOf(MultiPicker)).apply(this, arguments));
    }

    _createClass(MultiPicker, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                prefixCls = _props.prefixCls,
                pickerPrefixCls = _props.pickerPrefixCls,
                className = _props.className,
                rootNativeProps = _props.rootNativeProps,
                disabled = _props.disabled,
                pickerItemStyle = _props.pickerItemStyle,
                indicatorStyle = _props.indicatorStyle,
                pure = _props.pure,
                children = _props.children;

            var selectedValue = this.getValue();
            var colElements = children.map(function (col, i) {
                return React.createElement(
                    'div',
                    { key: col.key || i, className: prefixCls + '-item' },
                    React.createElement(Picker, _extends({ itemStyle: pickerItemStyle, disabled: disabled, pure: pure, indicatorStyle: indicatorStyle, prefixCls: pickerPrefixCls, selectedValue: selectedValue[i], onValueChange: _this2.onValueChange.bind(_this2, i) }, col.props))
                );
            });
            return React.createElement(
                'div',
                _extends({}, rootNativeProps, { className: classnames(className, prefixCls) }),
                colElements
            );
        }
    }]);

    return MultiPicker;
}(React.Component);

reactMixin.onClass(MultiPicker, MultiPickerMixin);
export default MultiPicker;